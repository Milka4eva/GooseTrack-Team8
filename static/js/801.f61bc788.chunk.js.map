{"version":3,"file":"static/js/801.f61bc788.chunk.js","mappings":"mMAAaA,EAAqB,SAAAC,GAAK,OAAIA,EAAMC,SAASC,YAAa,EAC1DC,EAAwB,SAAAH,GAAK,OAAIA,EAAMC,SAASG,eAAgB,EAEhEC,EAAmB,SAAAL,GAAK,OAAIA,EAAMC,SAASK,UAAW,EACtDC,EAAkB,SAAAP,GAAK,OAAIA,EAAMC,SAASO,SAAU,E,oGCelD,SAASC,EAAkBC,GAExC,OADAC,EAAAA,EAAAA,GAAa,EAAGC,WACuB,KAAhCC,EAAAA,EAAAA,SAAOH,GAAWI,SAC3B,C,cCCe,SAASC,EAAYL,GAElC,OADAC,EAAAA,EAAAA,GAAa,EAAGC,YACTI,EAAAA,EAAAA,SAAYC,KAAKC,MAAOR,EACjC,C,uBCLe,SAASS,EAAiBT,IACvCC,EAAAA,EAAAA,GAAa,EAAGC,WAChB,IAAIQ,GAAOP,EAAAA,EAAAA,SAAOH,GAClB,OAAOW,EAAAA,EAAAA,SAASD,GAAME,aAAcC,EAAAA,EAAAA,SAAWH,GAAME,SACvD,C,qFCtBaE,EAAUC,EAAAA,GAAOC,IAAGC,IAAAA,GAAAC,EAAAA,EAAAA,GAAA,gJAUpBC,EAAeJ,EAAAA,GAAOC,IAAGI,IAAAA,GAAAF,EAAAA,EAAAA,GAAA,2TAkBzBG,EAAYN,EAAAA,GAAOO,EAACC,IAAAA,GAAAL,EAAAA,EAAAA,GAAA,iXAsBpBM,EAAgBT,EAAAA,GAAOC,IAAGS,IAAAA,GAAAP,EAAAA,EAAAA,GAAA,4BAIjCQ,GAAaX,EAAAA,EAAAA,IAAOY,EAAAA,QAAPZ,CAAea,IAAAA,GAAAV,EAAAA,EAAAA,GAAA,waAWrB,SAAAW,GACT,OAAIA,EAAMC,SACD,MAEF,GACT,IAgBWC,GAAahB,EAAAA,EAAAA,IAAOW,EAAPX,CAAkBiB,IAAAA,GAAAd,EAAAA,EAAAA,GAAA,oKAQ/Be,GAAclB,EAAAA,EAAAA,IAAOW,EAAPX,CAAkBmB,IAAAA,GAAAhB,EAAAA,EAAAA,GAAA,mKAQhCiB,EAAOpB,EAAAA,GAAOqB,IAAGC,IAAAA,GAAAnB,EAAAA,EAAAA,GAAA,kL,SC5EjBoB,GAAkB,SAAHC,GAAsC,IAAhCC,EAAYD,EAAZC,aAAc5C,EAAU2C,EAAV3C,WACxCJ,GAAeiD,EAAAA,EAAAA,UAASC,EAAAA,EAAAA,aAAYrD,IACpCsD,GAAWC,EAAAA,EAAAA,eACX9C,GAAY4C,EAAAA,EAAAA,aAAY7C,GAExBgD,GAAYC,EAAAA,EAAAA,GAAU,IAAIvC,MAAKwC,EAAAA,EAAAA,SAAUvD,EAAc,IAAK,CAChEwD,eAAgB,SAEZC,GAAYH,EAAAA,EAAAA,GAAU,IAAIvC,MAAK2C,EAAAA,EAAAA,SAAU1D,EAAc,IAAK,CAChEwD,eAAgB,SAEZG,GAAUL,EAAAA,EAAAA,GAAU,IAAIvC,MAAK6C,EAAAA,EAAAA,SAAQ,IAAI7C,KAAKX,GAAa,IAAK,CACpEoD,eAAgB,SAEZK,GAAUP,EAAAA,EAAAA,GAAU,IAAIvC,MAAK+C,EAAAA,EAAAA,SAAQ,IAAI/C,KAAKX,GAAa,IAAK,CACpEoD,eAAgB,SAoClB,OACEO,EAAAA,EAAAA,MAACC,EAAW,CAACC,MAAOjB,EAAakB,SAAA,EAC/BC,EAAAA,EAAAA,KAACH,EAAgB,CAAAE,SACG,OAAjBlB,GACCmB,EAAAA,EAAAA,KAACH,EAAa,CAAAE,UACXE,EAAAA,EAAAA,SAAO,IAAIrD,KAAKX,GAAa,kBAGhC+D,EAAAA,EAAAA,KAACH,EAAa,CAAAE,UAAEE,EAAAA,EAAAA,SAAOpE,EAAc,kBAIzC+D,EAAAA,EAAAA,MAACC,EAAiB,CAAAE,SAAA,CACE,OAAjBlB,EACCzC,EAAkB,IAAIQ,KAAKX,KACzB+D,EAAAA,EAAAA,KAACH,EAAc,CAAC1B,UAAQ,EAAA4B,UACtBC,EAAAA,EAAAA,KAACH,EAAQ,CAACK,MAAM,KAAKC,OAAO,KAAIJ,UAC9BC,EAAAA,EAAAA,KAAA,OAAKI,KAAI,GAAAC,OAAKC,EAAAA,EAAK,6BAIvBN,EAAAA,EAAAA,KAACH,EAAc,CAACU,GAAE,OAAAF,OAASb,GAAWgB,QA9B1B,WACpBxB,GAASyB,EAAAA,EAAAA,IAAcjB,IACvBR,GAAS0B,EAAAA,EAAAA,IAAmB7B,EAAe,GAC7C,EA2BuEkB,UAC3DC,EAAAA,EAAAA,KAACH,EAAQ,CAACK,MAAM,KAAKC,OAAO,KAAIJ,UAC9BC,EAAAA,EAAAA,KAAA,OAAKI,KAAI,GAAAC,OAAKC,EAAAA,EAAK,4BAIvB5D,EAAY,IAAIE,KAAKf,KACvBmE,EAAAA,EAAAA,KAACH,EAAc,CAAC1B,UAAQ,EAAA4B,UACtBC,EAAAA,EAAAA,KAACH,EAAQ,CAACK,MAAM,KAAKC,OAAO,KAAIJ,UAC9BC,EAAAA,EAAAA,KAAA,OAAKI,KAAI,GAAAC,OAAKC,EAAAA,EAAK,6BAIvBN,EAAAA,EAAAA,KAACH,EAAc,CACbU,GAAE,SAAAF,QAAWlB,EAAAA,EAAAA,GACX,IAAIvC,MAAKwC,EAAAA,EAAAA,UAAUuB,EAAAA,EAAAA,SAAa,IAAI/D,KAAKf,IAAgB,IACzD,CAAEwD,eAAgB,UAEpBmB,QAAS,WACHrE,IAxEd6C,GAAS4B,EAAAA,EAAAA,OACT5B,GAAS6B,EAAAA,EAAAA,IAAgB3B,IACzBF,GACEyB,EAAAA,EAAAA,KACEtB,EAAAA,EAAAA,GACE,IAAIvC,MAAKwC,EAAAA,EAAAA,UAAUuB,EAAAA,EAAAA,SAAa,IAAI/D,KAAKf,IAAgB,IACzD,CAAEwD,eAAgB,WAsEhB,EACAlB,SAAUhC,EAAU4D,UAEpBC,EAAAA,EAAAA,KAACH,EAAQ,CAACK,MAAM,KAAKC,OAAO,KAAIJ,UAC9BC,EAAAA,EAAAA,KAAA,OAAKI,KAAI,GAAAC,OAAKC,EAAAA,EAAK,4BAKP,OAAjBzB,EACC/B,EAAiB,IAAIF,KAAKX,KACxB+D,EAAAA,EAAAA,KAACH,EAAe,CAAC1B,UAAQ,EAAA4B,UACvBC,EAAAA,EAAAA,KAACH,EAAQ,CAAAE,UACPC,EAAAA,EAAAA,KAAA,OAAKI,KAAI,GAAAC,OAAKC,EAAAA,EAAK,4BAIvBN,EAAAA,EAAAA,KAACH,EAAe,CAACU,GAAE,OAAAF,OAASX,GAAWc,QAlE3B,WACpBxB,GAASyB,EAAAA,EAAAA,IAAcf,IACvBV,GAAS0B,EAAAA,EAAAA,IAAmB7B,EAAe,GAC7C,EA+DwEkB,UAC5DC,EAAAA,EAAAA,KAACH,EAAQ,CAAAE,UACPC,EAAAA,EAAAA,KAAA,OAAKI,KAAI,GAAAC,OAAKC,EAAAA,EAAK,4BAKzBN,EAAAA,EAAAA,KAACH,EAAe,CACdU,GAAE,SAAAF,QAAWlB,EAAAA,EAAAA,GACX,IAAIvC,MAAK2C,EAAAA,EAAAA,UAAUoB,EAAAA,EAAAA,SAAa,IAAI/D,KAAKf,IAAgB,IACzD,CAAEwD,eAAgB,UAEpBmB,QAAS,WACHrE,IA9Fd6C,GAAS4B,EAAAA,EAAAA,OACT5B,GAAS6B,EAAAA,EAAAA,IAAgBvB,IACzBN,GACEyB,EAAAA,EAAAA,KACEtB,EAAAA,EAAAA,GACE,IAAIvC,MAAK2C,EAAAA,EAAAA,UAAUoB,EAAAA,EAAAA,SAAa,IAAI/D,KAAKf,IAAgB,IACzD,CAAEwD,eAAgB,WA4FhB,EACAlB,SAAUhC,EAAU4D,UAEpBC,EAAAA,EAAAA,KAACH,EAAQ,CAAAE,UACPC,EAAAA,EAAAA,KAAA,OAAKI,KAAI,GAAAC,OAAKC,EAAAA,EAAK,gCAOjC,ECtKanD,GAAUC,EAAAA,GAAOC,IAAGC,IAAAA,GAAAC,EAAAA,EAAAA,GAAA,4BAI3BQ,IAAaX,EAAAA,EAAAA,IAAOY,EAAAA,QAAPZ,CAAeK,IAAAA,GAAAF,EAAAA,EAAAA,GAAA,8qBAoCrBuD,IAAkB1D,EAAAA,EAAAA,IAAOW,GAAPX,CAAkBQ,IAAAA,GAAAL,EAAAA,EAAAA,GAAA,0WAgBpCwD,IAAkB3D,EAAAA,EAAAA,IAAO0D,GAAP1D,CAAuBU,IAAAA,GAAAP,EAAAA,EAAAA,GAAA,+FAKzCyD,IAAgB5D,EAAAA,EAAAA,IAAOW,GAAPX,CAAkBa,IAAAA,GAAAV,EAAAA,EAAAA,GAAA,8WAiBlC0D,IAAgB7D,EAAAA,EAAAA,IAAO4D,GAAP5D,CAAqBiB,IAAAA,GAAAd,EAAAA,EAAAA,GAAA,+FCnErC2D,GAAmB,WAC9B,IAAMC,GAAUlC,EAAAA,EAAAA,eACVmC,GAAcrC,EAAAA,EAAAA,aAAYrD,GAC1BO,GAAa8C,EAAAA,EAAAA,aAAY/C,GACzB6C,GAAeE,EAAAA,EAAAA,aAAYjD,GAE3BuF,EACa,OAAjBxC,EAAwBgB,GAAsBA,GAC1CyB,EAA2B,OAAjBzC,EAAwBgB,GAAoBA,GAE5D,OACED,EAAAA,EAAAA,MAACC,GAAW,CAAAE,SAAA,CACTrD,EAAY,IAAIE,KAAKwE,KACpBpB,EAAAA,EAAAA,KAACqB,EAAS,CACRd,GAAE,SAAAF,QAAWlB,EAAAA,EAAAA,GAAU,IAAIvC,KAAKwE,GAAc,CAC5C/B,eAAgB,UAElBmB,QAAS,WACPW,GAAQT,EAAAA,EAAAA,IAAmB,MAC7B,EAAEX,SACH,WAIDC,EAAAA,EAAAA,KAACqB,EAAS,CACRd,GAAE,SAAAF,QAAWlB,EAAAA,EAAAA,GAAU,IAAIvC,KAAKX,GAAa,CAC3CoD,eAAgB,UAElBmB,QAAS,WACPW,GAAQT,EAAAA,EAAAA,IAAmB,MAC7B,EAAEX,SACH,UAKFrD,EAAY,IAAIE,KAAKwE,KACpBpB,EAAAA,EAAAA,KAACsB,EAAO,CACNf,GAAE,OAAAF,QAASlB,EAAAA,EAAAA,GAAU,IAAIvC,KAAKwE,GAAc,CAC1C/B,eAAgB,UAElBmB,QAAS,WACPW,GACEV,EAAAA,EAAAA,KACEtB,EAAAA,EAAAA,GAAU,IAAIvC,KAAKwE,GAAc,CAAE/B,eAAgB,WAGvD8B,GACET,EAAAA,EAAAA,IAAmBa,QAAOtB,EAAAA,EAAAA,SAAO,IAAIrD,KAAKwE,GAAc,MAAQ,GAEpE,EAAErB,SACH,SAIDC,EAAAA,EAAAA,KAACsB,EAAO,CACNf,GAAE,OAAAF,QAASlB,EAAAA,EAAAA,GAAU,IAAIvC,KAAKX,GAAa,CACzCoD,eAAgB,UAElBmB,QAAS,WACPW,GACEV,EAAAA,EAAAA,KACEtB,EAAAA,EAAAA,GAAU,IAAIvC,KAAKX,GAAa,CAAEoD,eAAgB,WAGtD8B,GACET,EAAAA,EAAAA,IAAmBa,QAAOtB,EAAAA,EAAAA,SAAO,IAAIrD,KAAKX,GAAa,MAAQ,GAEnE,EAAE8D,SACH,UAMT,ECvFa5C,GAAUC,EAAAA,GAAOC,IAAGC,IAAAA,GAAAC,EAAAA,EAAAA,GAAA,gNCQpBiE,GAAkB,WAC7B,IAAMvF,GAAa8C,EAAAA,EAAAA,aAAY/C,GACzBD,GAAkBgD,EAAAA,EAAAA,aAAYjD,GACpC,OACE8D,EAAAA,EAAAA,MAACzC,GAAO,CAAA4C,SAAA,EACNC,EAAAA,EAAAA,KAACrB,GAAe,CAAC1C,WAAYA,EAAY4C,aAAc9C,KACvDiE,EAAAA,EAAAA,KAACkB,GAAgB,MAGvB,ECjBaO,GAAYrE,EAAAA,GAAOC,IAAGC,IAAAA,GAAAC,EAAAA,EAAAA,GAAA,qL,iCCFpB,SAASmE,KACtB,OAAO1B,EAAAA,EAAAA,KAAA,OAAAD,SAAK,gBACd,CCFe,SAAS4B,KACtB,OAAO3B,EAAAA,EAAAA,KAAA,OAAAD,SAAK,kBACd,CCUe,SAAS6B,KACtB,IAAM5C,GAAWC,EAAAA,EAAAA,eACXmC,GAAcrC,EAAAA,EAAAA,aAAYrD,GAchC,OAZAmG,EAAAA,GAAAA,YAAU,WACJT,GACFpC,GACE8C,EAAAA,GAAAA,IAAgB,CACdC,OAAO9B,EAAAA,EAAAA,SAAO,IAAIrD,KAAKwE,GAAc,KACrCY,MAAM/B,EAAAA,EAAAA,SAAO,IAAIrD,KAAKwE,GAAc,UAK5C,GAAG,CAACA,KAGFxB,EAAAA,EAAAA,MAAC6B,GAAS,CAAA1B,SAAA,EACRC,EAAAA,EAAAA,KAACwB,GAAe,KAChBxB,EAAAA,EAAAA,KAACiC,GAAAA,GAAM,KAEPrC,EAAAA,EAAAA,MAACsC,GAAAA,GAAM,CAAAnC,SAAA,EACLC,EAAAA,EAAAA,KAACmC,GAAAA,GAAK,CAACrC,OAAK,EAACsC,SAASpC,EAAAA,EAAAA,KAACqC,GAAAA,GAAQ,CAAC9B,GAAE,SAAAF,OAAWe,QAC7CpB,EAAAA,EAAAA,KAACmC,GAAAA,GAAK,CACJG,KAAK,qBACLF,SACExC,EAAAA,EAAAA,MAAA2C,EAAAA,SAAA,CAAAxC,SAAA,EACEC,EAAAA,EAAAA,KAAC0B,GAAiB,KAClB1B,EAAAA,EAAAA,KAAC2B,GAAa,UAKpB3B,EAAAA,EAAAA,KAACmC,GAAAA,GAAK,CAACG,KAAK,mBAAmBF,SAASpC,EAAAA,EAAAA,KAAA,OAAAD,SAAK,gBAIrD,C","sources":["redux/calendar/calendar.selectors.js","../node_modules/date-fns/esm/isFirstDayOfMonth/index.js","../node_modules/date-fns/esm/isThisMonth/index.js","../node_modules/date-fns/esm/isLastDayOfMonth/index.js","components/CalendarToolbar/PeriodPaginator/PeriodPaginator.styled.jsx","components/CalendarToolbar/PeriodPaginator/PeriodPaginator.jsx","components/CalendarToolbar/PeriodTypeSelect/PeriodTypeSelect.styled.jsx","components/CalendarToolbar/PeriodTypeSelect/PeriodTypeSelect.jsx","components/CalendarToolbar/CalendarToolbar.styled.jsx","components/CalendarToolbar/CalendarToolbar.jsx","pages/CalendarPage/CalendarPage.styled.jsx","pages/CalendarPage/MonthCalendarHead/MonthCalendarHead.jsx","pages/CalendarPage/CalendarTable/CalendarTable.jsx","pages/CalendarPage/CalendarPage.jsx"],"sourcesContent":["export const selectCurrentMonth = state => state.calendar.currentMonth;\nexport const selectIndexCurrentDay = state => state.calendar.indexCurrentDay;\nexport const selectTasks = state => state.calendar.tasks;\nexport const selectChoosedDay = state => state.calendar.choosedDay;\nexport const selectIsLoading = state => state.calendar.isLoading;","import toDate from \"../toDate/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name isFirstDayOfMonth\n * @category Month Helpers\n * @summary Is the given date the first day of a month?\n *\n * @description\n * Is the given date the first day of a month?\n *\n * @param {Date|Number} date - the date to check\n * @returns {Boolean} the date is the first day of a month\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // Is 1 September 2014 the first day of a month?\n * const result = isFirstDayOfMonth(new Date(2014, 8, 1))\n * //=> true\n */\nexport default function isFirstDayOfMonth(dirtyDate) {\n  requiredArgs(1, arguments);\n  return toDate(dirtyDate).getDate() === 1;\n}","import isSameMonth from \"../isSameMonth/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name isThisMonth\n * @category Month Helpers\n * @summary Is the given date in the same month as the current date?\n * @pure false\n *\n * @description\n * Is the given date in the same month as the current date?\n *\n * > ⚠️ Please note that this function is not present in the FP submodule as\n * > it uses `Date.now()` internally hence impure and can't be safely curried.\n *\n * @param {Date|Number} date - the date to check\n * @returns {Boolean} the date is in this month\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // If today is 25 September 2014, is 15 September 2014 in this month?\n * const result = isThisMonth(new Date(2014, 8, 15))\n * //=> true\n */\nexport default function isThisMonth(dirtyDate) {\n  requiredArgs(1, arguments);\n  return isSameMonth(Date.now(), dirtyDate);\n}","import toDate from \"../toDate/index.js\";\nimport endOfDay from \"../endOfDay/index.js\";\nimport endOfMonth from \"../endOfMonth/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name isLastDayOfMonth\n * @category Month Helpers\n * @summary Is the given date the last day of a month?\n *\n * @description\n * Is the given date the last day of a month?\n *\n * @param {Date|Number} date - the date to check\n * @returns {Boolean} the date is the last day of a month\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // Is 28 February 2014 the last day of a month?\n * const result = isLastDayOfMonth(new Date(2014, 1, 28))\n * //=> true\n */\nexport default function isLastDayOfMonth(dirtyDate) {\n  requiredArgs(1, arguments);\n  var date = toDate(dirtyDate);\n  return endOfDay(date).getTime() === endOfMonth(date).getTime();\n}","import { NavLink } from 'react-router-dom';\nimport styled from 'styled-components';\n\nexport const Wrapper = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n\n  @media (min-width: 768px) {\n    width: 278px;\n  }\n`;\n\nexport const MonthWrapper = styled.div`\n  display: flex;\n  flex-wrap: nowrap;\n  flex-direction: row;\n  justify-content: center;\n  align-items: center;\n\n  width: 192px;\n  height: 30px;\n  padding: 8px 12px;\n\n  background-color: var(--accent-btn-background);\n  border-radius: 8px;\n  @media (min-width: 768px) {\n    height: 34px;\n  }\n`;\n\nexport const MonthName = styled.p`\n  min-width: 94px;\n  height: 18px;\n\n  font-family: var(--primary-font);\n  font-style: normal;\n  font-weight: 700;\n  font-size: 14px;\n  line-height: 1.29;\n\n  text-align: center;\n  text-transform: uppercase;\n\n  color: var(--btn-text-color);\n  @media (min-width: 768px) {\n    min-width: 107px;\n\n    font-size: 16px;\n    line-height: 1.12;\n  }\n`;\n\nexport const WrapperButton = styled.div`\n  display: flex;\n`;\n\nconst StyledLink = styled(NavLink)`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  isolation: isolate;\n\n  width: 36px;\n  height: 30px;\n\n  background: var(--primary-background-color);\n  border: var(--border-calendar);\n  opacity: ${props => {\n    if (props.disabled) {\n      return '0.3';\n    }\n    return '1';\n  }};\n  &.active {\n    &:hover,\n    :focus {\n      box-shadow: none;\n    }\n  }\n\n  @media (min-width: 768px) {\n    width: 38px;\n    height: 34px;\n\n    border: var(--border);\n  }\n`;\n\nexport const ButtonLeft = styled(StyledLink)`\n  border-radius: 8px 0px 0px 8px;\n\n  transition: box-shadow var(--animation);\n  &:hover {\n    box-shadow: -4px 2px 10px rgba(136, 165, 191, 1);\n  }\n`;\nexport const ButtonRight = styled(StyledLink)`\n  border-radius: 0px 8px 8px 0px;\n\n  transition: box-shadow var(--animation);\n  &:hover {\n    box-shadow: 4px 2px 10px rgba(136, 165, 191, 1);\n  }\n`;\nexport const Icon = styled.svg`\n  width: 16px;\n  height: 16px;\n  stroke: var(--secondary-text-color);\n  fill: transparent;\n  @media (min-width: 768px) {\n    width: 18px;\n    height: 18px;\n  }\n`;","import { useDispatch, useSelector } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport {\n  format,\n  formatISO,\n  addMonths,\n  subMonths,\n  parseISO,\n  startOfMonth,\n  subDays,\n  addDays,\n  isThisMonth,\n  isFirstDayOfMonth,\n  isLastDayOfMonth,\n} from 'date-fns';\nimport {\n  addChoosedDay,\n  addCurrentMonth,\n  addIndexCurrentDay,\n  clearTasks,\n} from 'redux/calendar/calendar.slice';\nimport {\n  selectCurrentMonth,\n  selectIsLoading,\n} from 'redux/calendar/calendar.selectors';\n\nimport Icons from '../../../images/sprite.svg';\nimport * as STC from './PeriodPaginator.styled';\n\nexport const PeriodPaginator = ({ currentIndex, choosedDay }) => {\n  const currentMonth = parseISO(useSelector(selectCurrentMonth));\n  const dispatch = useDispatch();\n  const isLoading = useSelector(selectIsLoading);\n\n  const prevMonth = formatISO(new Date(subMonths(currentMonth, 1)), {\n    representation: 'date',\n  });\n  const nextMonth = formatISO(new Date(addMonths(currentMonth, 1)), {\n    representation: 'date',\n  });\n  const prevDay = formatISO(new Date(subDays(new Date(choosedDay), 1)), {\n    representation: 'date',\n  });\n  const nextDay = formatISO(new Date(addDays(new Date(choosedDay), 1)), {\n    representation: 'date',\n  });\n\n  const handlePrevMonth = () => {\n    dispatch(clearTasks());\n    dispatch(addCurrentMonth(prevMonth));\n    dispatch(\n      addChoosedDay(\n        formatISO(\n          new Date(subMonths(startOfMonth(new Date(currentMonth)), 1)),\n          { representation: 'date' }\n        )\n      )\n    );\n  };\n  const handleNextMonth = () => {\n    dispatch(clearTasks());\n    dispatch(addCurrentMonth(nextMonth));\n    dispatch(\n      addChoosedDay(\n        formatISO(\n          new Date(addMonths(startOfMonth(new Date(currentMonth)), 1)),\n          { representation: 'date' }\n        )\n      )\n    );\n  };\n  const handlePrevDay = () => {\n    dispatch(addChoosedDay(prevDay));\n    dispatch(addIndexCurrentDay(currentIndex - 1));\n  };\n  const handleNextDay = () => {\n    dispatch(addChoosedDay(nextDay));\n    dispatch(addIndexCurrentDay(currentIndex + 1));\n  };\n\n  return (\n    <STC.Wrapper index={currentIndex}>\n      <STC.MonthWrapper>\n        {currentIndex !== null ? (\n          <STC.MonthName>\n            {format(new Date(choosedDay), 'd MMMM yyyy')}\n          </STC.MonthName>\n        ) : (\n          <STC.MonthName>{format(currentMonth, 'MMMM yyyy')}</STC.MonthName>\n        )}\n      </STC.MonthWrapper>\n\n      <STC.WrapperButton>\n        {currentIndex !== null ? (\n          isFirstDayOfMonth(new Date(choosedDay)) ? (\n            <STC.ButtonLeft disabled>\n              <STC.Icon width=\"20\" height=\"20\">\n                <use href={`${Icons}#calendar-right-sf`}></use>\n              </STC.Icon>\n            </STC.ButtonLeft>\n          ) : (\n            <STC.ButtonLeft to={`day/${prevDay}`} onClick={handlePrevDay}>\n              <STC.Icon width=\"20\" height=\"20\">\n                <use href={`${Icons}#calendar-right-sf`}></use>\n              </STC.Icon>\n            </STC.ButtonLeft>\n          )\n        ) : isThisMonth(new Date(currentMonth)) ? (\n          <STC.ButtonLeft disabled>\n            <STC.Icon width=\"20\" height=\"20\">\n              <use href={`${Icons}#calendar-right-sf`}></use>\n            </STC.Icon>\n          </STC.ButtonLeft>\n        ) : (\n          <STC.ButtonLeft\n            to={`month/${formatISO(\n              new Date(subMonths(startOfMonth(new Date(currentMonth)), 1)),\n              { representation: 'date' }\n            )}`}\n            onClick={() => {\n              if (isLoading) {\n                return;\n              }\n              handlePrevMonth();\n            }}\n            disabled={isLoading}\n          >\n            <STC.Icon width=\"20\" height=\"20\">\n              <use href={`${Icons}#calendar-right-sf`}></use>\n            </STC.Icon>\n          </STC.ButtonLeft>\n        )}\n\n        {currentIndex !== null ? (\n          isLastDayOfMonth(new Date(choosedDay)) ? (\n            <STC.ButtonRight disabled>\n              <STC.Icon>\n                <use href={`${Icons}#calendar-left-sf`}></use>\n              </STC.Icon>\n            </STC.ButtonRight>\n          ) : (\n            <STC.ButtonRight to={`day/${nextDay}`} onClick={handleNextDay}>\n              <STC.Icon>\n                <use href={`${Icons}#calendar-left-sf`}></use>\n              </STC.Icon>\n            </STC.ButtonRight>\n          )\n        ) : (\n          <STC.ButtonRight\n            to={`month/${formatISO(\n              new Date(addMonths(startOfMonth(new Date(currentMonth)), 1)),\n              { representation: 'date' }\n            )}`}\n            onClick={() => {\n              if (isLoading) {\n                return;\n              }\n              handleNextMonth();\n            }}\n            disabled={isLoading}\n          >\n            <STC.Icon>\n              <use href={`${Icons}#calendar-left-sf`}></use>\n            </STC.Icon>\n          </STC.ButtonRight>\n        )}\n      </STC.WrapperButton>\n    </STC.Wrapper>\n  );\n};\nPeriodPaginator.propTypes = {\n  currentIndex: PropTypes.number || null.isRequired,\n  choosedDay: PropTypes.string,\n};","import { NavLink } from 'react-router-dom';\nimport styled from 'styled-components';\n\nexport const Wrapper = styled.div`\n  display: flex;\n`;\n\nconst StyledLink = styled(NavLink)`\n  display: flex;\n  flex-direction: row;\n  justify-content: center;\n  align-items: center;\n\n  width: 76px;\n  height: 34px;\n\n  background: var(--button-period-type);\n\n  font-family: var(--primary-font);\n  font-style: normal;\n  font-weight: 500;\n  font-size: 14px;\n  line-height: 1.29px;\n\n  color: var(--color-button-period-type);\n\n  &.active {\n    background: var(--active-button-period-type);\n    color: var(--accent-text-color);\n    &:hover,\n    :focus {\n      background-color: var(--active-button-period-type);\n      box-shadow: none;\n    }\n  }\n  @media (min-width: 768px) {\n    width: 82px;\n\n    font-size: 16px;\n    line-height: 1.12;\n  }\n`;\n\nexport const StyledLinkMonth = styled(StyledLink)`\n  padding: 8px 16px;\n\n  border: none;\n  border-right: var(--border-calendar-period-type);\n  border-radius: 8px 0px 0px 8px;\n\n  transition: background-color var(--animation), box-shadow var(--animation);\n\n  &:hover,\n  :focus {\n    background-color: var(--hover-button-period-type);\n    box-shadow: -4px 2px 16px rgba(136, 165, 191, 1);\n  }\n`;\n\nexport const LinkActiveMonth = styled(StyledLinkMonth)`\n  background: var(--active-button-period-type);\n  color: var(--accent-text-color);\n`;\n\nexport const StyledLinkDay = styled(StyledLink)`\n  padding: 8px 25px;\n  border: none;\n  border-radius: 0px 8px 8px 0px;\n\n  transition: background-color var(--animation), box-shadow var(--animation);\n\n  &:hover,\n  :focus {\n    background-color: var(--hover-button-period-type);\n    box-shadow: 4px 2px 16px rgba(136, 165, 191, 1);\n  }\n  @media (min-width: 768px) {\n    padding: 8px 26px;\n  }\n`;\n\nexport const LinkActiveDay = styled(StyledLinkDay)`\n  background: var(--active-button-period-type);\n  color: var(--accent-text-color);\n`;","import { useDispatch, useSelector } from 'react-redux';\nimport { format, formatISO, isThisMonth } from 'date-fns';\nimport {\n  addChoosedDay,\n  addIndexCurrentDay,\n} from 'redux/calendar/calendar.slice';\nimport {\n  selectChoosedDay,\n  selectCurrentMonth,\n  selectIndexCurrentDay,\n} from 'redux/calendar/calendar.selectors';\n\nimport * as STC from './PeriodTypeSelect.styled';\n\nexport const PeriodTypeSelect = () => {\n  const dispath = useDispatch();\n  const currentDate = useSelector(selectCurrentMonth);\n  const choosedDay = useSelector(selectChoosedDay);\n  const currentIndex = useSelector(selectIndexCurrentDay);\n\n  const LinkMonth =\n    currentIndex !== null ? STC.StyledLinkMonth : STC.LinkActiveMonth;\n  const LinkDay = currentIndex !== null ? STC.LinkActiveDay : STC.StyledLinkDay;\n\n  return (\n    <STC.Wrapper>\n      {isThisMonth(new Date(currentDate)) ? (\n        <LinkMonth\n          to={`month/${formatISO(new Date(currentDate), {\n            representation: 'date',\n          })}`}\n          onClick={() => {\n            dispath(addIndexCurrentDay(null));\n          }}\n        >\n          Month\n        </LinkMonth>\n      ) : (\n        <LinkMonth\n          to={`month/${formatISO(new Date(choosedDay), {\n            representation: 'date',\n          })}`}\n          onClick={() => {\n            dispath(addIndexCurrentDay(null));\n          }}\n        >\n          Month\n        </LinkMonth>\n      )}\n\n      {isThisMonth(new Date(currentDate)) ? (\n        <LinkDay\n          to={`day/${formatISO(new Date(currentDate), {\n            representation: 'date',\n          })}`}\n          onClick={() => {\n            dispath(\n              addChoosedDay(\n                formatISO(new Date(currentDate), { representation: 'date' })\n              )\n            );\n            dispath(\n              addIndexCurrentDay(Number(format(new Date(currentDate), 'd')) - 1)\n            );\n          }}\n        >\n          Day\n        </LinkDay>\n      ) : (\n        <LinkDay\n          to={`day/${formatISO(new Date(choosedDay), {\n            representation: 'date',\n          })}`}\n          onClick={() => {\n            dispath(\n              addChoosedDay(\n                formatISO(new Date(choosedDay), { representation: 'date' })\n              )\n            );\n            dispath(\n              addIndexCurrentDay(Number(format(new Date(choosedDay), 'd')) - 1)\n            );\n          }}\n        >\n          Day\n        </LinkDay>\n      )}\n    </STC.Wrapper>\n  );\n};","import styled from 'styled-components';\n\nexport const Wrapper = styled.div`\n  display: flex;\n  @media (max-width: 767px) {\n    flex-direction: column;\n    gap: 18px;\n  }\n  @media (min-width: 768px) {\n    align-items: center;\n    justify-content: space-between;\n  }\n`;","import { useSelector } from 'react-redux';\nimport {\n  selectChoosedDay,\n  selectIndexCurrentDay,\n} from 'redux/calendar/calendar.selectors';\nimport { PeriodPaginator } from './PeriodPaginator/PeriodPaginator';\nimport { PeriodTypeSelect } from './PeriodTypeSelect/PeriodTypeSelect';\n\nimport { Wrapper } from './CalendarToolbar.styled';\n\nexport const CalendarToolbar = () => {\n  const choosedDay = useSelector(selectChoosedDay);\n  const indexCurrentDay = useSelector(selectIndexCurrentDay);\n  return (\n    <Wrapper>\n      <PeriodPaginator choosedDay={choosedDay} currentIndex={indexCurrentDay} />\n      <PeriodTypeSelect />\n    </Wrapper>\n  );\n};","import styled from 'styled-components';\n\nexport const Container = styled.div`\n  display: flex;\n  flex-direction: column;\n  gap: 24px;\n\n  @media (min-width: 768px) {\n    gap: 32px;\n  }\n  @media (min-width: 1280px) {\n    padding-top: 0;\n  }\n`;","export default function MonthCalendarHead() {\n  return <div>Month header</div>;\n}\n","export default function CalendarTable() {\n  return <div>Calendar Table</div>;\n}\n","import { CalendarToolbar } from 'components/CalendarToolbar/CalendarToolbar';\nimport { Container } from './CalendarPage.styled';\nimport { Outlet } from 'react-router';\nimport { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { selectCurrentMonth } from 'redux/calendar/calendar.selectors';\nimport { getTasksOfMonth } from 'redux/calendar/calendar.operations';\nimport { format } from 'date-fns';\nimport { Route, Routes, Navigate } from 'react-router-dom';\nimport { MonthCalendarHead } from './MonthCalendarHead';\nimport { CalendarTable } from './CalendarTable';\n\nexport default function CalendarPage() {\n  const dispatch = useDispatch();\n  const currentDate = useSelector(selectCurrentMonth);\n\n  useEffect(() => {\n    if (currentDate) {\n      dispatch(\n        getTasksOfMonth({\n          month: format(new Date(currentDate), 'M'),\n          year: format(new Date(currentDate), 'yyyy'),\n        })\n      );\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [currentDate]);\n\n  return (\n    <Container>\n      <CalendarToolbar />\n      <Outlet />\n\n      <Routes>\n        <Route index element={<Navigate to={`month/${currentDate}`} />} />\n        <Route\n          path=\"month/:currentDate\"\n          element={\n            <>\n              <MonthCalendarHead />\n              <CalendarTable />\n            </>\n          }\n        />\n\n        <Route path=\"day/:currentDate\" element={<div>Day </div>} />\n      </Routes>\n    </Container>\n  );\n}\n"],"names":["selectCurrentMonth","state","calendar","currentMonth","selectIndexCurrentDay","indexCurrentDay","selectChoosedDay","choosedDay","selectIsLoading","isLoading","isFirstDayOfMonth","dirtyDate","requiredArgs","arguments","toDate","getDate","isThisMonth","isSameMonth","Date","now","isLastDayOfMonth","date","endOfDay","getTime","endOfMonth","Wrapper","styled","div","_templateObject","_taggedTemplateLiteral","MonthWrapper","_templateObject2","MonthName","p","_templateObject3","WrapperButton","_templateObject4","StyledLink","NavLink","_templateObject5","props","disabled","ButtonLeft","_templateObject6","ButtonRight","_templateObject7","Icon","svg","_templateObject8","PeriodPaginator","_ref","currentIndex","parseISO","useSelector","dispatch","useDispatch","prevMonth","formatISO","subMonths","representation","nextMonth","addMonths","prevDay","subDays","nextDay","addDays","_jsxs","STC","index","children","_jsx","format","width","height","href","concat","Icons","to","onClick","addChoosedDay","addIndexCurrentDay","startOfMonth","clearTasks","addCurrentMonth","StyledLinkMonth","LinkActiveMonth","StyledLinkDay","LinkActiveDay","PeriodTypeSelect","dispath","currentDate","LinkMonth","LinkDay","Number","CalendarToolbar","Container","MonthCalendarHead","CalendarTable","CalendarPage","useEffect","getTasksOfMonth","month","year","Outlet","Routes","Route","element","Navigate","path","_Fragment"],"sourceRoot":""}